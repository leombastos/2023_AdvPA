---
title: "USDA NASS Soybeans data"
subtitle: "Geospatial summaries"
author: "All of us"
format:
  html:
    code-fold: true
    embed-resources: true
    toc: true
    number-sections: true
    theme: cerulean
    #cerulean, journal, quartz, sketchy, slate, morph, superhero, vapor
knitr: 
  opts_chunk: 
    message: false
    warning: false
---

# Introduction  
This report was developed to explore, through **maps**, USDA NASS data for **soybeans production at the county level for all years available**.  

The raw data was downloaded from [USDA NASS QuickStats portal](https://quickstats.nass.usda.gov).  

# Setup  
## Loading packages  
```{r }
#install.packages("USAboundaries")
#install.packages("gganimate")
#install.packages("transformr")
#install.packages("mapview")
#install.packages("viridis")

library(tidyverse)
library(janitor)
library(ggthemes)
library(sf)
library(USAboundaries)
library(mapview)
library(gganimate)
library(viridis)

```

## Importing data  
```{r soy}
soy_w <- read_csv("../data/soybeans_nass_processed.csv")

soy_w
```

## Creating geospatial data 
```{r}
ga_co <- us_counties(states = "Georgia")

# Checking class
class(ga_co)

# Exploring the object
ga_co 

# Quick plot
ggplot(data = ga_co)+
  geom_sf()
```

Our goal now is to merge both the NASS data set `soy_w` with the GA counties geospatial dataset `ga_co`.  

# Wrangling  
## NASS data  
```{r soy_w_all}
soy_w_all <- soy_w %>%
  # Removing other counties
  filter(county != "OTHER COUNTIES" &
           county != "OTHER (COMBINED) COUNTIES") %>%
  # Matching county capitalization to ga_co
  mutate(county = str_to_title(county)) 

soy_w_all 
```

## County geospatial data  
```{r ga_co_w}
ga_co_w <- ga_co %>%
  dplyr::select(county=name, geometry)

ga_co_w    
```

## Joining NASS and county  
```{r soy_sp}
soy_sp <- ga_co_w %>%
  left_join(soy_w_all) 

soy_sp
```

- Check number of rows of product, compare to `soy_ww`  

# Maps - static  
## Plot 2021 production by county as a map  
```{r}
soy_sp %>%
  filter(year == 2021) %>%
  ggplot()+
  geom_sf(data = ga_co_w,
          size = .2)+
  geom_sf(aes(fill = prod_mibu),
          size = .2)
```

## Make map above publication ready  
```{r}
soy_sp %>%
  filter(year == 2021) %>%
  ggplot()+
  geom_sf(data = ga_co_w,
          size = .2)+
  geom_sf(data = ~., aes(fill = prod_mibu),
          size = .2
  )+
  # Selecting a colorblind-safe palette
  scale_fill_viridis_b(option = "C")+
  # Changing fill legend label, giving a title
  labs(fill = "Production\n(million bu)",
       title = "County-level soyeans production in 2021"
  )+
  # Adding county names
  geom_sf_text(data =  ~.,
               aes(label = county),
               size = 2,
               color = "white"
  )+
  # Changing to a cleaner theme
  theme_void()

ggsave("../output/soy-prod-21.png")
```
# Maps - interactive  
## Animated map of last 10 years
```{r}
# Creating map
map_ts <- soy_sp %>%
  # filtering last 10 years
  filter(year > 2011) %>%
  # Making year integer for title
  mutate(year = as.integer(year)) %>%
  # Here starts ggplot
  ggplot()+
  geom_sf(data = ga_co_w,
          size = .2)+
  geom_sf(data = ~., aes(fill = prod_mibu,
                         group = interaction(prod_mibu,
                                             year)
                         ),
          size = .2
  )+
  # Selecting a colorblind-safe palette
  scale_fill_viridis_b(option = "C")+
  # Changing fill legend label, giving a title
  labs(fill = "Production\n(million bu)",
       title = "County-level soyeans production in 2021"
  )+
  # Adding county names
  geom_sf_text(data =  ~.,
               aes(label = county,
                   group = interaction(county,
                                             year)
                   ),
               size = 2,
               color = "white"
  )+
  # Changing to a cleaner theme
  theme_void()

# Animated plot of last 10 years
map_ts+ 
  transition_time(year)+
  labs(title = "County-level soybeans production in {frame_time}")
  

```

## Interactive map of most recent year
```{r}

soy_sp_21 <- soy_sp %>%
          filter(year == 2021)

mapview(ga_co_w, 
        col.regions="white", 
        alpha.regions = .1,
        legend = NULL,
        map.types = "CartoDB.Positron")+

mapview(soy_sp_21,
        zcol = "prod_mibu",
        alpha.regions = 1,
        col.regions = plasma(20)
)
```

